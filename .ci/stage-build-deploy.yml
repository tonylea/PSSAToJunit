parameters:
  - name: vmLinuxImage
    type: string

stages:
  - stage: buildDeploy
    displayName: Build & Deploy
    pool:
      vmImage: ${{ parameters.vmLinuxImage }}
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
    variables:
      - group: 'PowerShellGallery'
    jobs:
      - job: build
        displayName: Build module
        steps:
          - checkout: self
            persistCredentials: true

          - pwsh: |
              $BuildFolder = Join-Path -Path $env:ROOT_FOLDER -ChildPath $env:BUILD_FOLDER_NAME
              $BuildScriptPath = Join-Path -Path $BuildFolder -ChildPath $env:BUILD_FILENAME
              $DependancyConfigPath = Join-Path -Path $BuildFolder -ChildPath $env:DEPENDANCY_FILENAME

              Write-Host "Running build script: $BuildScriptPath" -foregroundcolor cyan

              $BuildScriptPathArgs = @{
                ResolveDependency    = $true
                DependencyConfigPath = $DependancyConfigPath
                Task                 = "BumpVersion"
                ImportProjectModule  = $true
              }
              . $BuildScriptPath @BuildScriptPathArgs
            env:
              ROOT_FOLDER: $(System.DefaultWorkingDirectory)
              BUILD_FOLDER_NAME: build
              BUILD_FILENAME: build.ps1
              DEPENDANCY_FILENAME: dependencies.psd1
            displayName: run platyPS
            workingDirectory: $(System.DefaultWorkingDirectory)

          - pwsh: |
              git config --global user.email "bot@dev.azure.com"
              git config --global user.name "Build Agent"

              git push --follow-tags origin HEAD:$(Build.SourceBranchName)
            displayName: push changes

          - pwsh: |
              $BuildFolder = Join-Path -Path $env:ROOT_FOLDER -ChildPath $env:BUILD_FOLDER_NAME
              $BuildScriptPath = Join-Path -Path $BuildFolder -ChildPath $env:BUILD_FILENAME
              $DependancyConfigPath = Join-Path -Path $BuildFolder -ChildPath $env:DEPENDANCY_FILENAME

              Write-Host "Running build script: $BuildScriptPath" -foregroundcolor cyan

              $BuildScriptPathArgs = @{
                ResolveDependency    = $true
                DependencyConfigPath = $DependancyConfigPath
                Task                 = "BuildPackage"
                ImportProjectModule  = $true
              }
              . $BuildScriptPath @BuildScriptPathArgs
            env:
              ROOT_FOLDER: $(System.DefaultWorkingDirectory)
              BUILD_FOLDER_NAME: build
              BUILD_FILENAME: build.ps1
              DEPENDANCY_FILENAME: dependencies.psd1
            displayName: build package
            workingDirectory: $(System.DefaultWorkingDirectory)

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/staging'
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
              ArtifactName: 'ModuleArchive'
              publishLocation: 'Container'

          - pwsh: |
              Remove-Item -Recurse -Force $env:STAGING_DIR
            env:
              STAGING_DIR: $(System.DefaultWorkingDirectory)/staging
            displayName: clean build cache
            workingDirectory: $(System.DefaultWorkingDirectory)

      - job: deploy
        displayName: Deploy to PSGallery
        dependsOn: build
        condition: succeeded()
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'ModuleArchive'
              itemPattern: '**'
              targetPath: '$(Pipeline.Workspace)'

          # extract the archive
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/$(Build.BuildId).zip'
              destinationFolder: '$(Pipeline.Workspace)/$(Build.BuildId)'

          # publish to PSGallery
          - pwsh: |
              $JoinPathArgs = @{
                Path = $env:PIPELINE_WORKSPACE
                ChildPath = $env:BUILD_BUILDID
                AdditionalChildPath = @('staging', 'PSSAToJunit')
              }
              $MODULE_PATH = Join-Path @JoinPathArgs
              Write-Host "Publishing module from: $MODULE_PATH" -foregroundcolor cyan

              # $PublishModuleArgs = @{
              #   Path = $MODULE_PATH
              #   NuGetApiKey = $env:NUGET_KEY
              #   Repository = 'PSGallery'
              #   Verbosity = $true
              # }
              # Publish-Module @PublishModuleArgs
            env:
              NUGET_KEY: $(psgalleryApiKey)
              PIPELINE_WORKSPACE: $(Pipeline.Workspace)
              BUILD_BUILDID: $(Build.BuildId)
            displayName: publish to PSGallery
